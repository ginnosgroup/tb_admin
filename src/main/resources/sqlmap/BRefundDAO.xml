<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.zhinanzhen.b.dao.RefundDAO">

    <insert id="addRefund" parameterType="org.zhinanzhen.b.dao.pojo.RefundDO" useGeneratedKeys="true" keyProperty="id">
        INSERT
            INTO b_refund (
                gmt_create,
                gmt_modify,
                state,
                type,
                visa_id,
                commission_order_id,
                user_id,
                applicant_id,
                adviser_id,
                mara_id,
                official_id,
                school_id,
                course_id,
                receive_date,
                received,
                amount,
                payment_voucher_image_url,
                refund_voucher_image_url,
                refund_detail_id,
                refund_detail,
                currency_type,
                account_name,
                bank_name,
                bsb,
                rmb_remarks,
                reason,
                remarks)
            VALUES (
                now(),
                now(),
                'PENDING',
                #{type},
                #{visaId},
                #{commissionOrderId},
                #{userId},
                #{applicantId},
                #{adviserId},
                #{maraId},
                #{officialId},
                #{schoolId},
                #{courseId},
                #{receiveDate},
                #{received},
                #{amount},
                #{paymentVoucherImageUrl},
                #{refundVoucherImageUrl},
                #{refundDetailId},
                #{refundDetail},
                #{currencyType},
                #{accountName},
                #{bankName},
                #{bsb},
                #{rmbRemarks},
                #{reason},
                #{remarks});
    </insert>
    
    <select id="listRefund" resultType="org.zhinanzhen.b.dao.pojo.RefundDO">
        SELECT
            r.id,
            r.gmt_create AS gmtCreate,
            r.gmt_modify AS gmtModify,
            r.state,
            r.type,
            r.visa_id AS visaId,
            r.commission_order_id AS commissionOrderId,
            r.user_id AS userId,
            r.applicant_id AS applicantId,
            u.name AS userName,
            r.adviser_id AS adviserId,
            a.name AS adviserName,
            re.name AS adviserRegionName,
            r.mara_id AS maraId,
            r.official_id AS officialId,
            o.name AS officialName,
            r.school_id AS schoolId,
            r.course_id AS courseId,
            r.receive_date AS receiveDate,
            r.received,
            r.amount,
            r.payment_voucher_image_url AS paymentVoucherImageUrl,
            r.refund_voucher_image_url AS refundVoucherImageUrl,
            r.refund_detail_id AS refundDetailId,
            r.refund_detail AS refundDetail,
            r.currency_type AS currencyType,
            r.account_name AS accountName,
            r.bank_name AS bankName,
            r.bsb,
            r.rmb_remarks AS rmbRemarks,
            r.reason AS reason,
            r.remarks
        FROM tb_user u, tb_adviser a, tb_region re, b_refund r left join b_official o ON r.official_id = o.id
        WHERE r.user_id = u.id AND r.adviser_id = a.id AND re.id = a.region_id
        <if test='type != null and type != ""'>
			AND r.type = #{type}
		</if>
		<if test='state != null and state != ""'>
			AND r.state = #{state}
		</if>
		<if test="adviserId != null and adviserId > 0">
            AND r.adviser_id = #{adviserId}
        </if>
        <if test='startDate != null and startDate != "" and endDate != null and endDate != ""'>
            <![CDATA[ AND r.gmt_create > #{startDate} AND r.gmt_create < #{endDate} ]]>
        </if>
        ORDER BY r.gmt_create DESC;
    </select>
    
    <select id="getRefundById" parameterType="java.lang.Integer" resultType="org.zhinanzhen.b.dao.pojo.RefundDO">
         SELECT
            r.id,
            r.gmt_create AS gmtCreate,
            r.gmt_modify AS gmtModify,
            r.state,
            r.type,
            r.visa_id AS visaId,
            r.commission_order_id AS commissionOrderId,
            r.user_id AS userId,
            r.applicant_id AS applicantId,
            u.name AS userName,
            r.adviser_id AS adviserId,
            a.name AS adviserName,
            re.name AS adviserRegionName,
            r.mara_id AS maraId,
            r.official_id AS officialId,
            o.name AS officialName,
            r.school_id AS schoolId,
            r.course_id AS courseId,
            r.receive_date AS receiveDate,
            r.received,
            r.amount,
            r.payment_voucher_image_url AS paymentVoucherImageUrl,
            r.refund_voucher_image_url AS refundVoucherImageUrl,
            r.refund_detail_id AS refundDetailId,
            r.refund_detail AS refundDetail,
            r.currency_type AS currencyType,
            r.account_name AS accountName,
            r.bank_name AS bankName,
            r.bsb,
            r.rmb_remarks AS rmbRemarks,
            r.reason AS reason,
            r.remarks
        FROM tb_user u, tb_adviser a, tb_region re, b_refund r left join b_official o ON r.official_id = o.id
        WHERE r.user_id = u.id AND r.adviser_id = a.id AND re.id = a.region_id AND r.id = #{id, jdbcType=INTEGER};
    </select>
    
    <select id="getRefundByCommissionOrderId" parameterType="java.lang.Integer" resultType="org.zhinanzhen.b.dao.pojo.RefundDO">
         SELECT
            id,
            gmt_create AS gmtCreate,
            gmt_modify AS gmtModify,
            state,
            type,
            visa_id AS visaId,
            commission_order_id AS commissionOrderId,
            user_id AS userId,
            applicant_id AS applicantId,
            adviser_id AS adviserId,
            mara_id AS maraId,
            official_id AS officialId,
            school_id AS schoolId,
            course_id AS courseId,
            receive_date AS receiveDate,
            received,
            amount,
            payment_voucher_image_url AS paymentVoucherImageUrl,
            refund_voucher_image_url AS refundVoucherImageUrl,
            refund_detail_id AS refundDetailId,
            refund_detail AS refundDetail,
            currency_type AS currencyType,
            account_name AS accountName,
            bank_name AS bankName,
            bsb,
            rmb_remarks AS rmbRemarks,
            reason AS reason,
            remarks
        FROM b_refund
        WHERE state != 'CLOSE' AND commission_order_id = #{commissionOrderId, jdbcType=INTEGER};
    </select>
    
    <select id="getRefundByVisaId" parameterType="java.lang.Integer" resultType="org.zhinanzhen.b.dao.pojo.RefundDO">
         SELECT
            id,
            gmt_create AS gmtCreate,
            gmt_modify AS gmtModify,
            state,
            type,
            visa_id AS visaId,
            commission_order_id AS commissionOrderId,
            user_id AS userId,
            applicant_id AS applicantId,
            adviser_id AS adviserId,
            mara_id AS maraId,
            official_id AS officialId,
            school_id AS schoolId,
            course_id AS courseId,
            receive_date AS receiveDate,
            received,
            amount,
            payment_voucher_image_url AS paymentVoucherImageUrl,
            refund_voucher_image_url AS refundVoucherImageUrl,
            refund_detail_id AS refundDetailId,
            refund_detail AS refundDetail,
            currency_type AS currencyType,
            account_name AS accountName,
            bank_name AS bankName,
            bsb,
            rmb_remarks AS rmbRemarks,
            reason AS reason,
            remarks
        FROM b_refund
        WHERE state != 'CLOSE' AND visa_id = #{visaId, jdbcType=INTEGER};
    </select>
    
    <update id="updateRefund" parameterType="org.zhinanzhen.b.dao.pojo.RefundDO">
        UPDATE b_refund 
        SET gmt_modify = now()
        <if test='state != null and state != ""'>
            , state = #{state}
        </if>
        <if test='userId != null and userId > 0'>
            , user_id = #{userId}
        </if>
        <if test='applicantId != null and applicantId > 0'>
            , applicant_id = #{applicantId}
        </if>
        <if test='adviserId != null and adviserId > 0'>
            , adviser_id = #{adviserId}
        </if>
        <if test='maraId != null and maraId > 0'>
            , mara_id = #{maraId}
        </if>
        <if test='officialId != null and officialId > 0'>
            , official_id = #{officialId}
        </if>
        <if test='schoolId != null and schoolId > 0'>
            , school_id = #{schoolId}
        </if>
        <if test='courseId != null and courseId > 0'>
            , course_id = #{courseId}
        </if>
        <if test='receiveDate != null'>
            , receive_date = #{receiveDate}
        </if>
        <if test='received != null'>
            , received = #{received}
        </if>
        <if test='amount != null'>
            , amount = #{amount}
        </if>
        <if test='paymentVoucherImageUrl != null and paymentVoucherImageUrl != ""'>
            , payment_voucher_image_url = #{paymentVoucherImageUrl}
        </if>
        <if test='refundVoucherImageUrl != null and refundVoucherImageUrl != ""'>
            , refund_voucher_image_url = #{refundVoucherImageUrl}
        </if>
        <if test='refundDetailId != null and refundDetailId > 0'>
            , refund_detail_id = #{refundDetailId}
        </if>
        <if test='refundDetail != null and refundDetail != ""'>
            , refund_detail = #{refundDetail}
        </if>
        <if test='currencyType != null and currencyType != ""'>
            , currency_type = #{currencyType}
        </if>
        <if test='accountName != null and accountName != ""'>
            , account_name = #{accountName}
        </if>
        <if test='bankName != null and bankName != ""'>
            , bank_name = #{bankName}
        </if>
        <if test='bsb != null and bsb != ""'>
            , bsb = #{bsb}
        </if>
        <if test='rmbRemarks != null and rmbRemarks != ""'>
            , rmb_remarks = #{rmbRemarks}
        </if>
        <if test='reason != null and reason != ""'>
            , reason = #{reason}
        </if>
        <if test='remarks != null and remarks != ""'>
            , remarks = #{remarks}
        </if>
        WHERE id = #{id};
    </update>
    
    <delete id="deleteRefundById" parameterType="java.lang.Integer">
        DELETE FROM b_refund
        WHERE id =#{id, jdbcType=INTEGER};
    </delete>

    <select id="listRefundReport" resultType="org.zhinanzhen.b.dao.pojo.RefoundReportDO">
        SELECT
            <choose>
                <when test='dateType != null and dateType == "P" and dateMethod != null and dateMethod == "M"'>
                    DATE_FORMAT(rf.gmt_create, '%Y-%m') AS date,
                </when>
                <when test='dateType != null and dateType == "P" and dateMethod != null and dateMethod == "D"'>
                    DATE_FORMAT(rf.gmt_create, '%Y-%m-%d') AS date,
                </when>
                <when test='dateType != null and dateType == "A" and dateMethod != null and dateMethod == "M"'>
                    DATE_FORMAT(rf.gmt_create, '%Y-%m') AS date,
                </when>
                <when test='dateType != null and dateType == "A" and dateMethod != null and dateMethod == "Y"'>
                    DATE_FORMAT(rf.gmt_create, '%Y') AS date,
                </when>
                <otherwise>
                    DATE_FORMAT(rf.gmt_create, '%Y-%m-%d') AS date,
                </otherwise>
            </choose>
            r.id AS regionId,
            r.name AS area,
            a.id AS adviserId,
            a.name AS consultant,
            SUM(IF(rf.state = 'COMPLETE', IFNULL(rf.amount , 0.00), 0.00)) AS refunding,
            SUM(IF(rf.state = 'PAID', IFNULL(rf.amount , 0.00), 0.00)) AS refunded
        FROM b_refund rf, tb_adviser a, tb_region r
        WHERE a.region_id = r.id AND rf.adviser_id = a.id AND rf.state IN ('REVIEW', 'COMPLETE', 'PAID', 'CLOSE')
        <if test='startDate != null and startDate != "" and endDate != null and endDate != ""'>
            <![CDATA[ AND rf.gmt_create > #{startDate} AND rf.gmt_create < #{endDate} ]]>
        </if>
        <if test='regionId != null and regionId != ""'>
            AND r.id = #{regionId}
        </if>
        <if test='adviserId != null and adviserId != ""'>
            AND a.id = #{adviserId}
        </if>
        <if test="adviserIdList != null">
            AND a.id IN
            <foreach collection="adviserIdList" index="index" open="(" close=")" separator="," item="aid">
                #{aid}
            </foreach>
        </if>
        GROUP BY
        <choose>
            <when test='dateType != null and dateType == "P" and dateMethod != null and dateMethod == "M"'>
                DATE_FORMAT(rf.gmt_create, '%Y-%m'),
            </when>
            <when test='dateType != null and dateType == "P" and dateMethod != null and dateMethod == "D"'>
                DATE_FORMAT(rf.gmt_create, '%Y-%m-%d'),
            </when>
            <when test='dateType != null and dateType == "A" and dateMethod != null and dateMethod == "M"'>
                DATE_FORMAT(rf.gmt_create, '%Y-%m'),
            </when>
            <when test='dateType != null and dateType == "A" and dateMethod != null and dateMethod == "Y"'>
                DATE_FORMAT(rf.gmt_create, '%Y'),
            </when>
            <otherwise>
                DATE_FORMAT(rf.gmt_create, '%Y-%m-%d'),
            </otherwise>
        </choose>
        adviser_id
        ORDER BY rf.gmt_create DESC;
    </select>
</mapper>
